package com.android.approjects.grafika;

import android.app.ListActivity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.ListView;
import android.widget.SimpleAdapter;

import com.android.approjects.R;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.Nullable;

/**
 * All uses of the "synchronous" MediaCodec API follow a basic pattern:
 * (1) create and configure the MediaCodec object
 * (2) loop until done
 *      if an input buffer is ready:
 *          read a chunk of input, copy it into the buffer.
 *      if an output buffer is ready:
 *          copy the output from the buffer.
 * (3) release MediaCodec object
 */

/**
 * A single instance of MediaCodec handles one specific type of data (e.g. MP3 audio or
 * H.264 video), and may encode or decode.
 * It operates on "raw" data, so any file headers (e.g. ID3 tags) must be stripped off.
 * It does not talk to any higher-level system components; it will not play your audio
 * out through the speaker or receive a stream of video over a network.
 * It just takes buffers of data in and spits (Âêê) buffers of data out. (You can use
 * MediaExtractor to strip the wrappers off in most situations.)
 *
 * You do not hand a buffer with data to MediaCodec. You ask it for a buffer, and if one
 * is available, you copy the data in.
 */

/**
 * Manages content generated by the app.
 *
 * <p>
 *     Originally this was going to prepare stuff on demand, but it's easier to just
 *     create it all up front on first launch.
 * </p>
 *
 * Class is thread-safe.
 */

public class GrafikaActivity extends ListActivity {
    public static final String TAG = "Grafika";

    // map keys
    private static final String TITLE = "title";
    private static final String DESCRIPTION = "description";
    private static final String CLASS_NAME = "class_name";

    /**
     * Each entry has three strings: the test title, the test description, and the name of
     * the activity class.
     */
    private static final String[][] TESTS = {
            {
                    "* Play video (TextureView)",
                    "Plays .mp4 videos created by Grafika",
                    "PlayMovieActivity"
            },
            {
                    "Continuous capture",
                    "Records camera continuously, saves a snapshot when requested",
                    "ContinuousCaptureActivity"
            },
            {
                    "Double decode",
                    "Decodes two videos side-by-side",
                    "DoubleDecodeActivity"
            },
            {
                    "Hardware scaler exerciser",
                    "Exercises SurfaceHolder#setFixedSize()",
                    "HardwareScalerActivity"
            },
            {
                    "Live camera (TextureView)",
                    "Trivially feeds the camera preview to a view",
                    "LiveCameraActivity"
            },
            {
                    "Multi-surface test",
                    "Three overlapping SurfaceViews, one secure",
                    "MultiSurfaceActivity"
            },
            {
                    "Play video (SurfaceView)",
                    "Plays .mp4 videos created by Grafika",
                    "PlayMovieSurfaceActivity"
            },
            {
                    "Record GL app",
                    "Records GL app with FBO, re-render, or FB blit",
                    "RecordFBOActivity"
            },
            {
                    "Record screen using MediaProjectionManager",
                    "Screen recording using MediaProjectionManager and Virtual Display",
                    "ScreenRecordActivity"
            },
            {
                    "Scheduled swap",
                    "Exercises SurfaceFlinger PTS handling",
                    "ScheduledSwapActivity"
            },
            {
                    "Show + capture camera",
                    "Shows camera preview, records when requested",
                    "CameraCaptureActivity"
            },
            {
                    "Simple GL in TextureView",
                    "Renders with GL as quickly as possible",
                    "TextureViewGLActivity"
            },
            {
                    "Simple Canvas in TextureView",
                    "Renders with Canvas as quickly as possible",
                    "TextureViewCanvasActivity"
            },
            {
                    "Texture from Camera",
                    "Resize and zoom the camera preview",
                    "TextureFromCameraActivity"
            },
            {
                    "{bench} glReadPixels speed test",
                    "Tests glReadPixels() performance with 720p frames",
                    "ReadPixelsActivity"
            },
            {
                    "{bench} glTexImage2D speed test",
                    "Tests glTexImage2D() performance on 512x512 image",
                    "TextureUploadActivity"
            },
            {
                    "{util} Color bars",
                    "Shows RGB color bars",
                    "ColorBarActivity"
            },
            {
                    "{util} OpenGL ES info",
                    "Dumps info about graphics drivers",
                    "GlesInfoActivity"
            },
            {
                    "{~ignore} Chor test",
                    "Exercises bug",
                    "ChorTestActivity"
            },
            {
                    "{~ignore} Codec open test",
                    "Exercises bug",
                    "CodecOpenActivity"
            },
            {
                    "{~ignore} Software input surface",
                    "Exercises bug",
                    "SoftInputSurfaceActivity"
            }
    };

    private static final Comparator<Map<String, Object>> TEST_LIST_COMPARATOR =
            new Comparator<Map<String, Object>>() {
                @Override
                public int compare(Map<String, Object> map1, Map<String, Object> map2) {
                    String title1 = (String) map1.get(TITLE);
                    String title2 = (String) map2.get(TITLE);
                    return title1.compareTo(title2);
                }
            };

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // setContentView(R.layout.activity_grafika);

        // One-time singleton initialization; requires activity context to get file location.
        ContentManager.initialize(this);

        setListAdapter(new SimpleAdapter(this, createActivityList(),
                android.R.layout.two_line_list_item, new String[] {TITLE, DESCRIPTION},
                new int[] {android.R.id.text1, android.R.id.text2}));

        ContentManager cm = ContentManager.getInstance();

        if (!cm.isContentCreated(this)) {
            ContentManager.getInstance().createAll(this);
        }
    }

    /**
     * Creates the list of of activities from the string arrays.
     */
    private List<Map<String, Object>> createActivityList() {
        List<Map<String, Object>> testList = new ArrayList<>();

        for (String[] test : TESTS) {
            Map<String, Object> tmp = new HashMap<>();
            tmp.put(TITLE, test[0]);
            tmp.put(DESCRIPTION, test[1]);
            Intent intent = new Intent();
            // Do the class name resolution here, so we crash up front rather than when the
            // activity list item is selected if the class name is wrong.
            try {
                Class cls = Class.forName("com.android.approjects.grafika.activity." + test[2]);
                intent.setClass(this, cls);
                tmp.put(CLASS_NAME, intent);
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }
            testList.add(tmp);
        }

        Collections.sort(testList, TEST_LIST_COMPARATOR);
        return testList;
    }

    @Override
    protected void onListItemClick(ListView l, View v, int position, long id) {
        Map<String, Object> map = (Map<String, Object>) l.getItemAtPosition(position);
        Intent intent = (Intent) map.get(CLASS_NAME);
        startActivity(intent);
    }


}
