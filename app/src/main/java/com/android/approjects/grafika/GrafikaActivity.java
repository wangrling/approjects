package com.android.approjects.grafika;

import android.app.ListActivity;
import android.os.Bundle;

import com.android.approjects.R;

import androidx.annotation.Nullable;

/**
 * All uses of the "synchronous" MediaCodec API follow a basic pattern:
 * (1) create and configure the MediaCodec object
 * (2) loop until done
 *      if an input buffer is ready:
 *          read a chunk of input, copy it into the buffer.
 *      if an output buffer is ready:
 *          copy the output from the buffer.
 * (3) release MediaCodec object
 */

/**
 * A single instance of MediaCodec handles one specific type of data (e.g. MP3 audio or
 * H.264 video), and may encode or decode.
 * It operates on "raw" data, so any file headers (e.g. ID3 tags) must be stripped off.
 * It does not talk to any higher-level system components; it will not play your audio
 * out through the speaker or receive a stream of video over a network.
 * It just takes buffers of data in and spits (Âêê) buffers of data out. (You can use
 * MediaExtractor to strip the wrappers off in most situations.)
 *
 * You do not hand a buffer with data to MediaCodec. You ask it for a buffer, and if one
 * is available, you copy the data in.
 */

/**
 * Manages content generated by the app.
 *
 * <p>
 *     Originally this was going to prepare stuff on demand, but it's easier to just
 *     create it all up front on first launch.
 * </p>
 *
 * Class is thread-safe.
 */

public class GrafikaActivity extends ListActivity {
    public static final String TAG = "Grafika";

    // map keys
    private static final String TITLE = "title";
    private static final String DESCRIPTION = "description";
    private static final String CLASS_NAME = "class_name";

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // setContentView(R.layout.activity_grafika);

        // One-time singleton initialization; requires activity context to get file location.
        ContentManager.initialize(this);


    }
}
